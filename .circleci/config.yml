version: 2.1

orbs:
  slack: circleci/slack@4.10.1

jobs:
  install-project:
    docker:
      - image: node:16-alpine
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1.1.0-deps-{{ checksum "yarn.lock" }}
            - v1.1.0-deps-
      - run:
          name: Install bash, yarn and @nestjs/cli
          command: |
            apk add --no-cache bash
            apk add --no-cache yarn --repository="http://dl-cdn.alpinelinux.org/alpine/edge/community"
            yarn global add @nestjs/cli
      - run:
          name: Install project
          command: |
            yarn
      - save_cache:
          key: v1.1.0-deps-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
            - backend/bff/node_modules
            - backend/users/node_modules
            - backend/profiles/node_modules
            - frontend/node_modules

  run-tests:
    docker:
      - image: node:16-alpine
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1.1.0-deps-{{ checksum "yarn.lock" }}
            - v1.1.0-deps-
      - run:
          name: Install bash, curl, yarn and @nestjs/cli
          command: |
            apk add --no-cache bash curl
            apk add --no-cache yarn --repository="http://dl-cdn.alpinelinux.org/alpine/edge/community"
            yarn global add @nestjs/cli
      - run:
          name: Run all tests
          command: |
            make test
      - slack/notify:
          template: basic_fail_1
          event: fail

  run-lint:
    docker:
      - image: node:16-alpine
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1.1.0-deps-{{ checksum "yarn.lock" }}
            - v1.1.0-deps-
      - run:
          name: Install bash, curl, yarn and @nestjs/cli
          command: |
            apk add --no-cache bash curl
            apk add --no-cache yarn --repository="http://dl-cdn.alpinelinux.org/alpine/edge/community"
            yarn global add @nestjs/cli
      - run:
          name: Run lint
          command: |
            make lint
      - slack/notify:
          template: basic_fail_1
          event: fail

  notify-success:
    docker:
      - image: node:16-alpine
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1.1.0-deps-{{ checksum "yarn.lock" }}
            - v1.1.0-deps-
      - run:
          name: Install bash, curl, yarn and @nestjs/cli
          command: |
            apk add --no-cache bash curl
      - slack/notify:
          template: basic_success_1
          event: always

  update-version:
    docker:
      - image: node:16-alpine
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1.1.0-deps-{{ checksum "yarn.lock" }}
            - v1.1.0-deps-
      - run:
          name: Install bash, curl, git, yarn and @nestjs/cli
          command: |
            apk add --no-cache bash curl git
            apk add --no-cache yarn --repository="http://dl-cdn.alpinelinux.org/alpine/edge/community"
            yarn global add @nestjs/cli
      - run:
          name: Update version
          command: |
            npx semantic-release
      - slack/notify:
          template: basic_fail_1
          event: fail

  build-images:
    docker:
      - image: docker:latest
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache bash curl make git
      - run:
          name: Build and push Docker images
          command: |
            export NEW_VERSION=$(git describe --tags --abbrev=0)
            echo NEW_VERSION: $NEW_VERSION

            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER --password-stdin

            make build-docker-images version=$NEW_VERSION
            make push-docker-images version=$NEW_VERSION
      - slack/notify:
          template: basic_fail_1
          event: fail

workflows:
  integration:
    jobs:
      - install-project
      - run-tests:
          requires: [install-project]
          context:
            - teste
      - run-lint:
          requires: [install-project]
          context:
            - teste
      - notify-success:
          requires: [run-tests, run-lint]
          context:
            - teste
          filters:
            branches:
              ignore: master
      - update-version:
          requires: [run-tests, run-lint]
          context:
            - teste
          filters:
            branches:
              only: master

  deployment:
    jobs:
      - build-images:
          context:
            - teste
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
