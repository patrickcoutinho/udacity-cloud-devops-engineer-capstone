AWSTemplateFormatVersion: 2010-09-09
Description: "EKS Managed Nodes"
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Iops: 3000
              Throughput: 125
              VolumeSize: 80
              VolumeType: gp3
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: optional
        SecurityGroupIds:
          - !ImportValue "CloudDevopsCapstone::ClusterSecurityGroupId"
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: cloud-devops-capstone-ng-c42938c9-Node
              - Key: alpha.eksctl.io/nodegroup-name
                Value: ng-c42938c9
              - Key: alpha.eksctl.io/nodegroup-type
                Value: managed
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: cloud-devops-capstone-ng-c42938c9-Node
              - Key: alpha.eksctl.io/nodegroup-name
                Value: ng-c42938c9
              - Key: alpha.eksctl.io/nodegroup-type
                Value: managed
          - ResourceType: network-interface
            Tags:
              - Key: Name
                Value: cloud-devops-capstone-ng-c42938c9-Node
              - Key: alpha.eksctl.io/nodegroup-name
                Value: ng-c42938c9
              - Key: alpha.eksctl.io/nodegroup-type
                Value: managed
      LaunchTemplateName: !Sub "${AWS::StackName}"
  ManagedNodeGroup:
    Type: "AWS::EKS::Nodegroup"
    Properties:
      AmiType: AL2_x86_64
      ClusterName: cloud-devops-capstone
      InstanceTypes:
        - t2.micro
      Labels:
        alpha.eksctl.io/cluster-name: cloud-devops-capstone
        alpha.eksctl.io/nodegroup-name: ng-c42938c9
      LaunchTemplate:
        Id: !Ref LaunchTemplate
      NodeRole: !GetAtt
        - NodeInstanceRole
        - Arn
      NodegroupName: ng-c42938c9
      ScalingConfig:
        DesiredSize: 2
        MaxSize: 2
        MinSize: 2
      Subnets: !Split
        - ","
        - !ImportValue "CloudDevopsCapstone::SubnetsPublic"
      Tags:
        alpha.eksctl.io/nodegroup-name: ng-c42938c9
        alpha.eksctl.io/nodegroup-type: managed
  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref "AWS::Partition"
                  - EC2
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Path: /
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}/NodeInstanceRole"
